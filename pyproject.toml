[tool.poetry]
name = "hate-speech-detection"
version = "0.1.0"
description = ""
authors = ["Tri Nguyen <tringuyenminh23@gmail.com"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
dynaconf = "^3.2.4"
pydantic = "^2.5.3"
llama-cpp-python = "^0.2.29"
fastapi = "^0.109.0"
uvicorn = "^0.26.0"
alembic = "^1.13.1"
sqlmodel = "^0.0.14"
asyncpg = "^0.29.0"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
scikit-learn = "^1.4.0"
httpx = "^0.26.0"
pytest-alembic = "^0.10.7"
pytest-asyncio = "^0.23.3"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
addopts = """\
    --cov src \
    --cov-report term-missing \
    --no-cov-on-fail \
"""


log_cli = true
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%dT%H:%M:%S.%f"

markers = [
    "evaluation: evaluation tests, require --run-eval",
    "integration: integration tests, require --run-integration",
]


[tool.black]
target-version = ["py310", "py311"]
include = '\.pyi?$'
line-length = 120


[tool.mypy]
disallow_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true

plugins = [
    "pydantic.mypy"
]


[tool.ruff]
line-length = 120

select = [
    "E",  # pycodestyle
    "W",  # pycodestyle
    "F",  # Pyflakes
    "PL", # pylint
    "I", # isort
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "S", # flake8-bandit
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
    "YTT", # flake8-2020
    "UP", # pyupgrade
    "C4", # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "T20", # flake8-print"
]
ignore = [
    "S101", # S101: Allow the use of assert
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py311"

[tool.ruff.per-file-ignores]
"migrations/**/*.py" = [
    "INP001",  # INP001 - Requires __init__.py
]
